"use strict";

var dateFormat = require("dateformat");
var fs = require("fs");
var xml2js = require("xml2js");

var parsePomXml = function(fileName) {
    var retObj = {};
    var parser = new xml2js.Parser();
    var pomXml = fs.readFileSync(fileName, "utf8");

    parser.parseString(pomXml, function(err, result) {
        retObj.name = result.project.artifactId[0];
        retObj.version = result.project.version[0];
    });

    return retObj;
};

var makeBannerText = function(bannerText) {
    return "========================================\n" + bannerText + "\n" + "========================================";
};

var currDateTime = dateFormat(new Date(), "mm/dd/yyyy HH:MM:ss");
var pom = parsePomXml("pom.xml");
var bannerText = makeBannerText(pom.name + " (" + pom.version + ")");

module.exports = function(grunt) {
    // Print banner text
    grunt.log.writeln(bannerText);
    
    var allTasks = [
        "clean:build",
        "less:build",
        "copy:build",
        "useminPrepare", // Start useminPrepare
        "ngtemplates:build", // This needs to come before the concat task
        "concat:generated", // Auto generated by usemin
        "cssmin:generated", // Auto generated by usemin
        "uglify:generated", // Auto generated by usemin
        "usemin" // End usemin
    ];
    
    // Init config
    grunt.initConfig({
        ngModuleName: "ngContacts",
        projectName: pom.name,
        projectVersion: pom.version,
        tempDir: ".tmp",
        webAppDir: "src/main/webapp",
        assetsDir: "<%= webAppDir %>/assets",
        assetsDirJs: "<%= assetsDir %>/js",
        assetsDirCss: "<%= assetsDir %>/css",
        
        clean: {
            build: ["<%= tempDir %>"]
        },
          
//        jshint: {
//            options: {
//                reporter: require("jshint-stylish"),
//                ignores: ["<%= assetsDirJs %>/**/*.min.js"] // Don't lint the *.min.js files
//            },
//            build: ["<%= assetsDirJs %>/**/*.js"]
//        },
        
        less: {
            build: {
                files: {
                    "<%= assetsDirCss %>/style.css": "<%= assetsDirCss %>/style.less"
                }
            }
        },
        
        uglify: {
            options: {
                banner: "/* <%= projectName %> (<%= projectVersion %>) - " + currDateTime + " */\n"
            }
        },
        
        // Copy the file because it must exist before it can be modified
        copy: {
            build: {
                src: "<%= webAppDir %>/app.jsp",
                dest: "<%= webAppDir %>/app-dist.jsp"
            }
        },
        
        useminPrepare: {
            options: {
                dest: "<%= webAppDir %>" // Root folder of the new optimized files
                // Default flow
                /*
                flow: {
                    steps: {
                        js: ["concat", "uglify"],
                        css: ["concat", "cssmin"]
                    },
                    post: {}
                }
                */
            },
            html: "<%= webAppDir %>/app.jsp" // Look at this file to determine which blocks to replace
        },
        
        usemin: {
            html: ["<%= webAppDir %>/app-dist.jsp"] // This is the file that will modified (it must already exist)
        },
        
        // Get all the angular templates and concatenate them to a file.
        // Add that file to the usemin block identified by <!-- build:js app.min.js -->.
        // Usemin will proceed as usual to concat all files and minify them to app.min.js.
        ngtemplates: {
            build: {
                cwd: "<%= webAppDir %>",
                src: "assets/js/**/*.html",
                dest: "<%= tempDir %>/all-templates.js", // Just write to a file in the temp dir, it will then be concated and minified
                options: {
                    module: "<%= ngModuleName %>",
                    usemin: "app.min.js" // This came from the <!-- build:js --> block
                }
            }
        },
        
        watch: {
            css: {
                files: ["<%= assetsDirCss %>/**/*.less"],
                tasks: ["less:build"]
            }
//            js: {
//                files: ["<%= assetsDirJs %>/**/*.js", "!<%= assetsDirJs %>/**/*.min.js"], // Don't watch the *.min.js files
//                tasks: allTasks
//            }
        }
    });
    
    // This module will read the dependencies/devDependencies/peerDependencies/optionalDependencies
    // in your package.json and load grunt tasks that match the provided patterns.
    // Default pattern for loading: ['grunt-*', '@*/grunt-*']
    require("load-grunt-tasks")(grunt, {
        scope: "devDependencies"
    });
    
    require("time-grunt")(grunt);

    grunt.registerTask("default", allTasks);
};
